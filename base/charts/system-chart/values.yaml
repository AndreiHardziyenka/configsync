appOfApps:
  name: app-of-apps
  namespace: system
  destination:
    server: https://kubernetes.default.svc
  project: default
  source:
    repoUrl: "https://github.com/argoproj/argocd-example-apps.git"
    path: apps

argo-cd:
  global:
    securityContext:
      runAsUser: 999
      runAsGroup: 999
      fsGroup: 999
    imagePullSecrets: []
    hostAliases: []

  nameOverride: "system"

  controller:
    name: application-controller

    image:
      repository: # argoproj/argocd
      tag: # v1.5.4
      imagePullPolicy: # IfNotPresent

    ## Argo controller commandline flags
    args:
      statusProcessors: "20"
      operationProcessors: "10"

    ## Argo controller log level
    logLevel: info

    ## Additional command line arguments to pass to argocd-controller
    ##
    extraArgs: []

    ## Environment variables to pass to argocd-controller
    ##
    env: []

    ## Annotations to be added to controller pods
    ##
    podAnnotations: {}

    ## Labels to be added to controller pods
    ##
    podLabels: {}

    ## Labels to set container specific security contexts
    containerSecurityContext:
      capabilities:
        drop:
          - all
      readOnlyRootFilesystem: true
      runAsNonRoot: true

    ## Configures the controller port
    containerPort: 8082

    ## Readiness and liveness probes for default backend
    ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/
    ##
    readinessProbe:
      failureThreshold: 3
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    livenessProbe:
      failureThreshold: 3
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1

    ## Additional volumeMounts to the controller main container.
    volumeMounts: []

    ## Additional volumes to the controller pod.
    volumes: []

    ## Controller service configuration
    service:
      annotations: {}
      labels: {}
      port: 8082
      portName: https-controller

    ## Node selectors and tolerations for server scheduling to nodes with taints
    ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
    ##
    nodeSelector: {}
    tolerations: []
    affinity: {}

    priorityClassName: ""

    resources:
      limits:
        cpu: 500m
        memory: 4Gi
      requests:
        cpu: 250m
        memory: 512Mi

    serviceAccount:
      create: true
      name: argocd-application-controller

    ## Server metrics controller configuration
    metrics:
      enabled: false
      service:
        annotations: {}
        labels: {}
        servicePort: 8082
      serviceMonitor:
        enabled: false
      #   selector:
      #     prometheus: kube-prometheus
      #   namespace: monitoring
      #   additionalLabels: {}
      rules:
        enabled: false
        spec: []
        # - alert: ArgoAppMissing
        #   expr: |
        #     absent(argocd_app_info)
        #   for: 15m
        #   labels:
        #     severity: critical
        #   annotations:
        #     summary: "[ArgoCD] No reported applications"
        #     description: >
        #       ArgoCD has not reported any applications data for the past 15 minutes which
        #       means that it must be down or not functioning properly.  This needs to be
        #       resolved for this cloud to continue to maintain state.
        # - alert: ArgoAppNotSynced
        #   expr: |
        #     argocd_app_sync_status{sync_status!="Synced"} == 1
        #   for: 12h
        #   labels:
        #     severity: warning
        #   annotations:
        #     summary: "[{{`{{$labels.name}}`}}] Application not synchronized"
        #     description: >
        #       The application [{{`{{$labels.name}}`}} has not been synchronized for over
        #       12 hours which means that the state of this cloud has drifted away from the
        #       state inside Git.
      #   selector:
      #     prometheus: kube-prometheus
      #   namespace: monitoring
      #   additionalLabels: {}

    ## Enable Admin ClusterRole resources.
    ## Enable if you would like to grant rights to ArgoCD to deploy to the local kuberentes cluster.
    clusterAdminAccess:
      enabled: true
  dex:
    enabled: true
    name: dex-server

    image:
      repository: quay.io/dexidp/dex
      tag: v2.22.0
      imagePullPolicy: IfNotPresent
    initImage:
      repository:
      tag:
      imagePullPolicy:

    ## Environment variables to pass to the Dex server
    ##
    env: []

    ## Annotations to be added to the Dex server pods
    ##
    podAnnotations: {}

    ## Labels to be added to the Dex server pods
    ##
    podLabels: {}

    serviceAccount:
      create: true
      name: argocd-dex-server

    ## Additional volumeMounts to the controller main container.
    volumeMounts:
      - name: static-files
        mountPath: /shared

    ## Additional volumes to the controller pod.
    volumes:
      - name: static-files
        emptyDir: {}

    ## Dex deployment container ports
    containerPortHttp: 5556
    servicePortHttp: 5556
    containerPortGrpc: 5557
    servicePortGrpc: 5557

    ## Node selectors and tolerations for server scheduling to nodes with taints
    ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
    ##
    nodeSelector: {}
    tolerations: []
    affinity: {}

    priorityClassName: ""

    ## Labels to set container specific security contexts
    containerSecurityContext:
      capabilities:
        drop:
          - all
      readOnlyRootFilesystem: true
      runAsNonRoot: true


    resources:
      limits:
        cpu: 50m
        memory: 64Mi
      requests:
        cpu: 10m
        memory: 32Mi

  ## Redis
  redis:
    enabled: true
    name: redis

    image:
      repository: redis
      tag: 5.0.3
      imagePullPolicy: IfNotPresent

    containerPort: 6379
    servicePort: 6379

    ## Environment variables to pass to the Redis server
    ##
    env: []

    ## Annotations to be added to the Redis server pods
    ##
    podAnnotations: {}

    ## Labels to be added to the Redis server pods
    ##
    podLabels: {}

    ## Node selectors and tolerations for server scheduling to nodes with taints
    ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
    ##
    nodeSelector: {}
    tolerations: []
    affinity: {}

    priorityClassName: ""

    ## Labels to set container specific security contexts
    containerSecurityContext:
      capabilities:
        drop:
          - all
      readOnlyRootFilesystem: true
      runAsNonRoot: true


    resources:
      limits:
        cpu: 200m
        memory: 128Mi
      requests:
        cpu: 100m
        memory: 64Mi

    volumeMounts: []
    volumes: []

  # This key configures Redis-HA subchart and when enabled (redis-ha.enabled=true)
  # the custom redis deployment is omitted
  redis-ha:
    enabled: false
    # Check the redis-ha chart for more properties
    exporter:
      enabled: true
    persistentVolume:
      enabled: false
    redis:
      masterGroupName: argocd
      config:
        save: "\"\""
    haproxy:
      enabled: false
#      metrics:
#        enabled: true
#      securityContext:
#        capabilities:
#          drop:
#            - all
#        readOnlyRootFilesystem: true
#        runAsNonRoot: true



  ## Server
  server:
    name: server

    replicas: 2

    autoscaling:
      enabled: true
      minReplicas: 2
      maxReplicas: 5
      targetCPUUtilizationPercentage: 80
      targetMemoryUtilizationPercentage: 80

    image:
      repository: # argoproj/argocd
      tag: # v1.5.4
      imagePullPolicy: # IfNotPresent

    ## Additional command line arguments to pass to argocd-server
    ##
    extraArgs:
      - --insecure

    ## Environment variables to pass to argocd-server
    ##
    env: []

    ## Argo server log level
    logLevel: info

    ## Annotations to be added to controller pods
    ##
    podAnnotations: {}

    ## Labels to be added to controller pods
    ##
    podLabels: {}

    ## Configures the server port
    containerPort: 8080

    ## Readiness and liveness probes for default backend
    ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/
    ##
    readinessProbe:
      failureThreshold: 3
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    livenessProbe:
      failureThreshold: 3
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1

    ## Additional volumeMounts to the server main container.
    volumeMounts: []

    ## Additional volumes to the controller pod.
    volumes: []

    ## Node selectors and tolerations for server scheduling to nodes with taints
    ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
    ##
    nodeSelector: {}
    tolerations: []
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: argocd-server
              topologyKey: failure-domain.beta.kubernetes.io/zone
            weight: 100
        requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                app.kubernetes.io/name: argocd-server
            topologyKey: kubernetes.io/hostname

    priorityClassName: ""

    ## Labels to set container specific security contexts
    containerSecurityContext:
      capabilities:
        drop:
          - all
      readOnlyRootFilesystem: true
      runAsNonRoot: true

    resources:
      limits:
        cpu: 100m
        memory: 128Mi
      requests:
        cpu: 50m
        memory: 64Mi

    ## Certificate configuration
    certificate:
      enabled: false
      domain: argocd.example.com
      issuer: {}
      additionalHosts: []

    ## Server service configuration
    service:
      annotations: {}
      labels: {}
      type: ClusterIP
      servicePortHttp: 80
      servicePortHttps: 443
      servicePortHttpName: http
      servicePortHttpsName: https
      loadBalancerIP: ""
      loadBalancerSourceRanges: []

    ## Server metrics service configuration
    metrics:
      enabled: false
      service:
        annotations: {}
        labels: {}
        servicePort: 8083
      serviceMonitor:
        enabled: false
      #   selector:
      #     prometheus: kube-prometheus
      #   namespace: monitoring
      #   additionalLabels: {}

    serviceAccount:
      create: true
      name: argocd-server
    route:
      enabled: false
      hostname: ""

    ingress:
      enabled: true
      annotations:
        kubernetes.io/ingress.class: nginx
        nginx.ingress.kubernetes.io/backend-protocol: HTTP
      labels: {}
      hosts: []
      paths:
        - /
      https: true
      ingressGrpc:
        enabled: true
    ## ArgoCD config
    ## reference https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/argocd-cm.yaml
    config:
      application.instanceLabelKey: argocd.argoproj.io/instance

    rbacConfig:
      {}
      # policy.csv is an file containing user-defined RBAC policies and role definitions (optional).
      # Policy rules are in the form:
      #   p, subject, resource, action, object, effect
      # Role definitions and bindings are in the form:
      #   g, subject, inherited-subject
      # See https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/rbac.md for additional information.
      # policy.csv: |
      #   # Grant all members of the group 'my-org:team-alpha; the ability to sync apps in 'my-project'
      #   p, my-org:team-alpha, applications, sync, my-project/*, allow
      #   # Grant all members of 'my-org:team-beta' admins
      #   g, my-org:team-beta, role:admin
      # policy.default is the name of the default role which Argo CD will falls back to, when
      # authorizing API requests (optional). If omitted or empty, users may be still be able to login,
      # but will see no apps, projects, etc...
      # policy.default: role:readonly
      # scopes controls which OIDC scopes to examine during rbac enforcement (in addition to `sub` scope).
      # If omitted, defaults to: '[groups]'. The scope value can be a string, or a list of strings.
      # scopes: '[cognito:groups, email]'

      ## Not well tested and not well supported on release v1.0.0.
      ## Applications
      ## reference: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/
    additionalApplications: []
      # - name: guestbook
      #   namespace: argocd
      #   additionalLabels: {}
      #   additionalAnnotations: {}
      #   project: guestbook
      #   source:
      #     repoURL: https://github.com/argoproj/argocd-example-apps.git
      #     targetRevision: HEAD
      #     path: guestbook
      #     directory:
      #       recurse: true
      #  destination:
      #     server: https://kubernetes.default.svc
      #     namespace: guestbook
      #  syncPolicy:
      #    automated:
      #      prune: false
      #      selfHeal: false

      ## Projects
      ## reference: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/
    additionalProjects: []
      # - name: guestbook
      #   namespace: argocd
      #   additionalLabels: {}
      #   additionalAnnotations: {}
      #   description: Example Project
      #   sourceRepos:
      #   - '*'
      #   destinations:
      #   - namespace: guestbook
      #     server: https://kubernetes.default.svc
      #   clusterResourceWhitelist: []
      #   namespaceResourceBlacklist:
      #   - group: ''
      #     kind: ResourceQuota
      #   - group: ''
      #     kind: LimitRange
      #   - group: ''
      #     kind: NetworkPolicy
      #     orphanedResources: {}
      #     roles: []
      #   namespaceResourceWhitelist:
      #   - group: 'apps'
      #     kind: Deployment
      #   - group: 'apps'
      #     kind: StatefulSet
      #   orphanedResources: {}
      #   roles: []

      ## Enable Admin ClusterRole resources.
      ## Enable if you would like to grant rights to ArgoCD to deploy to the local kuberentes cluster.
    clusterAdminAccess:
      enabled: true

      ## Enable BackendConfig custom resource for Google Kubernetes Engine
    GKEbackendConfig:
      enabled: false
      spec: {}
      #  spec:
      #    iap:
      #      enabled: true
      #      oauthclientCredentials:
      #        secretName: argocd-secret
  repoServer:
    name: repo-server

    replicas: 2

    autoscaling:
      enabled: true
      minReplicas: 2
      maxReplicas: 5
      targetCPUUtilizationPercentage: 50
      targetMemoryUtilizationPercentage: 50

    image:
      repository: # argoproj/argocd
      tag: # v1.5.4
      imagePullPolicy: # IfNotPresent

    ## Additional command line arguments to pass to argocd-repo-server
    ##
    extraArgs: []

    ## Environment variables to pass to argocd-repo-server
    ##
    env: []

    ## Argo repoServer log level
    logLevel: info

    ## Annotations to be added to repo server pods
    ##
    podAnnotations: {}

    ## Labels to be added to repo server pods
    ##
    podLabels: {}

    ## Configures the repo server port
    containerPort: 8081

    ## Readiness and liveness probes for default backend
    ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/
    ##
    readinessProbe:
      failureThreshold: 3
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    livenessProbe:
      failureThreshold: 3
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    ## Additional volumes to the repo server pod.
    volumes:
      - name: repo-volume
        emptyDir: {}
    ## Additional volumeMounts to the repo server main container.
    volumeMounts:
      - mountPath: /opt
        name: repo-volume

    ## Node selectors and tolerations for server scheduling to nodes with taints
    ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
    ##
    nodeSelector: {}
    tolerations: []
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: argocd-repo-server
              topologyKey: failure-domain.beta.kubernetes.io/zone
            weight: 100
        requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                app.kubernetes.io/name: argocd-repo-server
            topologyKey: kubernetes.io/hostname

    priorityClassName: ""

    ## Labels to set container specific security contexts
    containerSecurityContext:
      capabilities:
        drop:
          - all
      #readOnlyRootFilesystem: true
      runAsNonRoot: true

    resources:
      limits:
        cpu: 50m
        memory: 128Mi
      requests:
        cpu: 10m
        memory: 64Mi

    ## Repo server service configuration
    service:
      annotations: {}
      labels: {}
      port: 8081
      portName: https-repo-server

    ## Repo server metrics service configuration
    metrics:
      enabled: false
      service:
        annotations: {}
        labels: {}
        servicePort: 8084
      serviceMonitor:
        enabled: false
      #   selector:
      #     prometheus: kube-prometheus
      #   namespace: monitoring
      #   additionalLabels: {}

    ## Repo server service account
    ## If create is set to true, make sure to uncomment the name and update the rbac section below
    serviceAccount:
      create: false
      #  name: argocd-repo-server
      ## Annotations applied to created service account
      annotations: {}

    ## Repo server rbac rules
    # rbac:
    #   - apiGroups:
    #     - argoproj.io
    #     resources:
    #     - applications
    #     verbs:
    #     - get
    #     - list
    #     - watch

    ## Use init containers to configure custom tooling
    ## https://argoproj.github.io/argo-cd/operator-manual/custom_tools/
    ## When using the volumes & volumeMounts section bellow, please comment out those above.
    #  volumes:
    #  - name: custom-tools
    #    emptyDir: {}
    #
    #  initContainers:
    #  - name: download-tools
    #    image: alpine:3.8
    #    command: [sh, -c]
    #    args:
    #      - wget -qO- https://get.helm.sh/helm-v2.16.1-linux-amd64.tar.gz | tar -xvzf - &&
    #        mv linux-amd64/helm /custom-tools/
    #    volumeMounts:
    #      - mountPath: /custom-tools
    #        name: custom-tools
    #  volumeMounts:
    #  - mountPath: /usr/local/bin/helm
    #    name: custom-tools
    #    subPath: helm

  ## Argo Configs
  configs:
    secret:
      createSecret: false
    knownHosts:
      data:
        ssh_known_hosts: |
          bitbucket.org ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAubiN81eDcafrgMeLzaFPsw2kNvEcqTKl/VqLat/MaB33pZy0y3rJZtnqwR2qOOvbwKZYKiEO1O6VqNEBxKvJJelCq0dTXWT5pbO2gDXC6h6QDXCaHo6pOHGPUy+YBaGQRGuSusMEASYiWunYN0vCAI8QaXnWMXNMdFP3jHAJH0eDsoiGnLPBlBp4TNm6rYI74nMzgz3B9IikW4WVK+dc8KZJZWYjAuORU3jc1c/NPskD2ASinf8v3xnfXeukU0sJ5N6m5E8VLjObPEO+mN2t/FZTMZLiFqPWc/ALSqnMnnhwrNi2rbfg/rd/IpL8Le3pSBne8+seeFVBoGqzHM9yXw==
          github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==
          gitlab.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBFSMqzJeV9rUzU4kWitGjeR4PWSa29SPqJ1fVkhtj3Hw9xjLVXVYrU9QlYWrOLXBpQ6KWjbjTDTdDkoohFzgbEY=
          gitlab.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIAfuCHKVTjquxvt6CM6tdG4SLp1Btn/nOeHHE5UOzRdf
          gitlab.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCsj2bNKTBSpIYDEGk9KxsGh3mySTRgMtXL583qmBpzeQ+jqCMRgBqB98u3z++J1sKlXHWfM9dyhSevkMwSbhoR8XIq/U0tCNyokEi/ueaBMCvbcTHhO7FcwzY92WK4Yt0aGROY5qX2UKSeOvuP4D6TPqKF1onrSzH9bx9XUf2lEdWT/ia1NEKjunUqu1xOB/StKDHMoX4/OKyIzuS0q/T1zOATthvasJFoPrAjkohTyaDUz2LN5JoH839hViyEG82yB+MjcFV5MU3N1l1QL3cVUCh93xSaua1N85qivl+siMkPGbO5xR/En4iEY6K2XPASUEMaieWVNTRCtJ4S8H+9
          ssh.dev.azure.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H
          vs-ssh.visualstudio.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H
          gitlab.tools.parts.tvh.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBA4Ztj5p727qLf8I03MME9I06SKvc/bI8z70sBIAb60oOW9hIgaPtlpchzF0VE3CSTylJj0iSdMh9D2ffPiqoNw= 10.134.0.7 ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBA4Ztj5p727qLf8I03MME9I06SKvc/bI8z70sBIAb60oOW9hIgaPtlpchzF0VE3CSTylJj0iSdMh9D2ffPiqoNw=

ingress-nginx:
  enabled: true
  nameOverride: "ingress-nginx"

  selectorLabels:
    app.kubernetes.io/version: "0.0.1"
    app.kubernetes.io/managed-by: "ingress-nginx"
    app.kubernetes.io/part-of: "ingress-nginx"

  controller:
    # disable admission web hook as this causes argo to fail
    admissionWebhooks:
      enabled: false
    kind: DaemonSet # We use daemonset for all clusters

  defaultBackend:
    enabled: true

    name: default-backend
    image:
      tag: "1.5"
    replicaCount: 1
    runAsUser: 1000

    resources:
      limits:
        cpu: 10m
        memory: 16Mi

    service:
      annotations:
        service.beta.kubernetes.io/external-traffic: OnlyLocal

tvh-prometheus-operator:
  enabled: false

kong:
  enabled: false

kong-control-plane:
  env:
    pg_host: "some-gce-proxy"

kongGceProxy:
  connectionName: "dummy:connection:name"
  port: 5432
